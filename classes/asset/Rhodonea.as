package  classes.asset{	//http://en.wikipedia.org/wiki/Rose_curve	//r=sin(kθ) r=cos(kθ)	//http://en.wikipedia.org/wiki/Golden_ratio	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.utils.Timer;	public class Rhodonea extends Sprite{				public var _canvas:Sprite = new Sprite();		private var _width:Number;		private var _height:Number;		private var _points:Vector.<Point> = new Vector.<Point>();		private var _angleX:Number = 0;		private var _angleY:Number = 0;		private var _goldRaito:Number = 1.61803;				private var _lineWidth:Number = _goldRaito;		//private var _lineWidth:Number = 5;				private var _lineAlpha:Number = 0.03;		//private var _lineAlpha:Number = 1;				private var _k:Number = 0;		private var _n:Number = 0;		private var _d:Number = 0;				private var _speedX:Number = 0.13;		//private var _speedX:Number = 3;				//private var _speedY:Number = Math.random() * 0.5 - 0.25;		private var srk:Number = 703;		private var ww:Number = 30;		private var hh:Number = 30;				private const TIMER = 1000;		private var _timer:Timer;		public function Rhodonea(n:uint, d:uint) {			_k = n / d;			this.addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler, false, 0, true);		}				protected function addedToStageHandler(event:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			_width = stage.stageWidth;			_height = stage.stageHeight;			this.addChild(_canvas);			timerStart();		}				protected function timerEventHandler(event:TimerEvent):void		{			_timer.removeEventListener(TimerEvent.TIMER, timerEventHandler);						var i:uint;			var dx:Number;			var dy:Number;			var dist:Number;			var p0:Point;						//Lissajous oval			//var p1:Point = new Point(_width / 2 + Math.cos(_angleX) * _width / 2, _height / 2 + Math.sin(_angleY) * _height / 2);			//_angleX += _speedX;			//_angleY += _speedY;						//rhodonea curve			var r:Number = Math.cos(_k * _angleX);			var p1:Point = new Point(_width / 2 + r * Math.sin(_angleX) * (_width / 2 - ww), _height / 2 + r * Math.cos(_angleX)  * (_height / 2 - hh));			_angleX += _speedX;						for(i = 0; i < _points.length; i++){				p0 = _points[i];				dx = p0.x - p1.x;				dy = p0.y - p1.y;				dist = Math.sqrt(dx * dx + dy * dy);				if(dist < _goldRaito * srk){					_canvas.graphics.lineStyle(_lineWidth, Math.random() * 0xFFFFFF, _lineAlpha);					_canvas.graphics.moveTo(p0.x, p0.y);					_canvas.graphics.lineTo(p1.x, p1.y);				}			}			_points.push(p1);						_timer.stop();			if(_timer != null){				_timer = null;			}						this.dispatchEvent(new Event("saveScreen"));		}				public function timerStart():void{			_timer = new Timer(TIMER , 0);			_timer.addEventListener(TimerEvent.TIMER, timerEventHandler, false, 0, true);			_timer.start();		}	}}