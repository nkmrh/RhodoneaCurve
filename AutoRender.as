package{	import classes.asset.Rhodonea;		import com.adobe.images.PNGEncoder;	import com.flashdynamix.utils.SWFProfiler;		import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.NativeWindow;	import flash.desktop.NativeApplication;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.OutputProgressEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.ByteArray;	import flash.system.System;		public class AutoRender extends Sprite	{			private const FILE_NAME:String = "Rhodonea";		private const FOLDER_NAME:String = "RenderOutput";		private const TRANSPARENT_MODE:Boolean = false;				private const VERTEX_MAX:uint = 300;		//private const VERTEX_MAX:uint = 1;				private var _vertexNum:uint = 0;		private var _n:uint = 5;//初期値		private var _d:uint = 0;//初期値−１		private var _rhodonea:Rhodonea;		private var _window:NativeWindow;		private var _info:TextField;		private var _checkArray:Array = new Array();						public function AutoRender()		{			SWFProfiler.init(stage, this, true);			this.addEventListener(Event.ADDED_TO_STAGE, addToStageHandler, false, 0, true);		}				protected function addToStageHandler(event:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, addToStageHandler);			_window = this.stage.nativeWindow;			_info = new TextField();			_info.text = "";			_info.width = 1000;			_info.x = 20;			_info.y = 120;			var fmt:TextFormat = new TextFormat("", 30, 0xFFFFFF);			_info.defaultTextFormat = fmt;			this.addChild(_info);			create();		}				private function saveScreenHandler(evt:Event):void{			PngExport(_rhodonea, stage.stageWidth, stage.stageHeight, FILE_NAME + String(_n) + "_" + String(_d) + "_" + _vertexNum, FOLDER_NAME);			_vertexNum++;		}				private function PngExport(disp:*, w:Number, h:Number, name:String, folderName:String):void		{			//画像保存＆書き出し			//spriteからbitmapdata作成			var myBitmapData:BitmapData = new BitmapData(w, h, TRANSPARENT_MODE, 0x000000);			myBitmapData.draw(disp);			//bitmapdataからbyteArrayを抽出			var byteArr:ByteArray = new ByteArray();			byteArr = PNGEncoder.encode(myBitmapData);			//byteArr = myBitmapData.getPixels(myBitmapData.rect);			//file open			var fileName:String = name + ".png";			var file:File = File.desktopDirectory;			file = file.resolvePath(folderName + "/" + fileName);			var stream:FileStream = new FileStream();			stream.addEventListener(OutputProgressEvent.OUTPUT_PROGRESS, outputProgressHandler, false, 0, true);			stream.addEventListener(Event.CLOSE, fileCloseHandler, false, 0, true);			stream.openAsync(file, FileMode.WRITE);			stream.writeBytes(byteArr);		}				protected function fileCloseHandler(event:Event):void{			event.target.removeEventListener(Event.CLOSE, fileCloseHandler);			//trace("fileClosed");			_info.text = "Rendered : " + FILE_NAME + String(_n) + "_" + String(_d) + "_" + String(_vertexNum);			checkVertexNum();		}				protected function outputProgressHandler(event:OutputProgressEvent):void		{			//trace("outputProgressHandler");			event.target.removeEventListener(OutputProgressEvent.OUTPUT_PROGRESS, outputProgressHandler);			event.target.close();		}				protected function checkVertexNum():void		{			if(_vertexNum > VERTEX_MAX){				this.removeChild(_rhodonea);				_rhodonea = null;				_vertexNum = 0;				//ガベージコレクション強制実行				System.gc();								create();			}else{				if(_rhodonea != null){					_rhodonea.timerStart();				}			}		}				private function create():void		{			increment();			var i:int = 0;			for(; i < _checkArray.length; i++){				var k:Number = _n / _d;				/*				trace("^^^^^^^^^^^^^^^^^^^");				trace("k", k);				trace("i", i);				trace("_checkArray[i]", _checkArray[i]);				*/				if(_checkArray[i] == k){					//trace("continue", _n, _d);					increment();					i = -1;					continue;				}			}			_checkArray.push(_n / _d);						if(_rhodonea != null){				_rhodonea._canvas.graphics.clear();				removeChild(_rhodonea);				_rhodonea = null;			}						_rhodonea = new Rhodonea(_n, _d);			_rhodonea.addEventListener("saveScreen", saveScreenHandler, false, 0, true);			//_rhodonea.cacheAsBitmap = true;			addChild(_rhodonea);		}				private function increment():void{			if(_d < 9){				_d++;			}else if(_d >= 9){				_n++;				_d = 1;			}			//END			if(_n > 7){				NativeApplication.nativeApplication.exit();			}		}			}}